var otpSentData = "",
	prevOtpSentData = "",
	studMap = {},
	encryptObj = {},
	OTPType = "",
	otpGenCountArr = {};

function sendOTP(t, e, n) {
	//manuallycallforGoogle();
	n ? (text1 = "Do you want to Resend OTP(One Time Password) on Mobile No(<b>" + studMap.mobile + "</b>) ?", text1 += '<br><br> <b style="color:red">Note:- You have only maximum 3 attempts for the day.</b>', title1 = "Dear " + studMap.fullName + ",", confirmButtonText1 = "Resend OTP") : (otpSentData = "", text1 = "Do you want to send OTP(One Time Password) on Mobile Number(<b>" + studMap.mobile + "</b>) ?", text1 += '<br><br> <b style="color:red">Note:- You have only maximum 3 attempts for the day.</b>', title1 = "Dear " + studMap.fullName + ",", confirmButtonText1 = "Generate OTP"), swal({
		html: !0,
		title: title1,
		text: text1,
		type: "warning",
		showCancelButton: !0,
		showConfirmButton: !0,
		confirmButtonColor: "#33bdef",
		confirmButtonText: confirmButtonText1,
		cancelButtonText: "Cancel",
		closeOnConfirm: !1,
		closeOnCancel: !1
	}, (function(o) {
		
		if(o) {
			prevOtpSentData = otpSentData, otpSentData = "", $(".confirm").attr("disabled", !0), $(".cancel").attr("disabled", !0);
			var i = {};
			i.mobile = encryptObj.encMobNo, i.email = encryptObj.encEmailId;
			var r = JSON.stringify(i);
			$.ajax({
				type: "POST",
				url: "otprequest/sms/" + t,
				dataType: "json",
				async: !1,
				contentType: "application/json; charset=utf-8",
				data: r,
				beforeSend: function(t, e) {
					t.setRequestHeader(header, token)
				},
				success: function(t) {
					
					if(otpSentData = t, "" == t || "1" != t.status) return swal({
						html: !0,
						type: "error",
						confirmButtonColor: "#33bdef",
						title: "<i>Unable to send OTP</i>",
						text: "Please try again."
					}), min1 = 0, timer = 0, showMainPage(!1), !1;
					otpGenCountArr[studMap.mobile] = otpGenCountArr[studMap.mobile] > 0 ? otpGenCountArr[studMap.mobile] + 1 : 1, verifyOtp(e, n)
				},
				statusCode: {
					400: function(t) {
						return swal({
							html: !0,
							type: "error",
							confirmButtonColor: "#33bdef",
							title: "<i>" + t.responseJSON.respMessage + "</i>",
							text: t.responseJSON.respData,
							closeOnConfirm: !1
						}, (function(t) {
							otpSentData = prevOtpSentData, otpGenCountArr[studMap.mobile] > 0 && null != otpSentData.txn_id ? (otpGenCountArr[studMap.mobile] = attempCountLimit, verifyOtp(!1, !1)) : (swal.close(), min1 = 0, timer = 0, showMainPage(!0))
						})), !1
					}
				},
				error: function(t) {
					return console.log("error-12"), swal({
						html: !0,
						type: "error",
						confirmButtonColor: "#33bdef",
						title: "<i>Unable to send OTP</i>",
						text: "Please try again."
					}), 400 != t.status && (min1 = 0, timer = 0, showMainPage(!1)), !1
				},
				failure: function(t) {
					return console.log("failure-12"), co, swal({
						html: !0,
						type: "error",
						confirmButtonColor: "#33bdef",
						title: "<i>Unable to send OTP</i>",
						text: "Please try again after Sometime."
					}), min1 = 0, timer = 0, showMainPage(!1), !1
				}
			})
		} else swal({
			html: !0,
			confirmButtonColor: "#33bdef",
			title: "<i>Cancelled</i>",
			text: "OTP verification has been cancelled.",
			type: "error"
		}), min1 = 0, timer = 0, showMainPage(!1)
	}))
	
}

function verifyOtp(t, e) {
	var n, o, i, r = "";
	otpGenCountArr[studMap.mobile] < attempCountLimit && (r = '<div class="notranslate" style="text-align:right;" id="otpDiv">OTP not Received? <br /><a id="resendHref" href="javascript:void(0);" onclick="resendOTP();">Resend OTP</a></div>'), t ? (n = "OTP has been sent on Mobile No(<b>" + studMap.mobile + '</b>).<input type="text" id="otpTxt" autofocus  tabindex="0"  maxlength="6" placeholder="OTP" style="display:block;">' + r + "<br />", o = "success", i = "<i>OTP sent successfully.</i>", startTimer()) : e ? (n = "OTP has been resent on Mobile No(<b>" + studMap.mobile + '</b>).<input type="text" id="otpTxt" autofocus  tabindex="0" maxlength="6" placeholder="OTP" style="display:block;">' + r + "<br />", o = "success", i = "<i>OTP resent successfully.</i>", startTimer()) : (n = "Enter the OTP received on Mobile No(<b>" + studMap.mobile + '</b>).<input type="text" id="otpTxt" autofocus  tabindex="0" maxlength="6" placeholder="OTP" style="display:block;">' + r + "<br />", o = "info", i = "<i>ReEnter OTP.</i>"), swal({
		html: !0,
		title: i,
		text: n,
		type: o,
		animation: "slide-from-top",
		showCancelButton: !0,
		showConfirmButton: !0,
		confirmButtonColor: "#33bdef",
		confirmButtonText: "Verify",
		cancelButtonText: "Cancel",
		closeOnConfirm: !1,
		closeOnCancel: !1
	}, (function(t) {
		if(t) {
			if("" == $.trim($("#otpTxt").val())) return swal({
				html: !0,
				type: "error",
				confirmButtonColor: "#33bdef",
				title: "<i>Invalid OTP</i>.",
				text: "Please enter OTP in the Text-Field.",
				closeOnConfirm: !1
			}, (function(t) {
				verifyOtp(!1, !1)
			})), !1;
			if(isNaN(parseInt($("#otpTxt").val())) || parseInt($("#otpTxt").val()).toString().length < 6) return swal({
				html: !0,
				type: "error",
				confirmButtonColor: "#33bdef",
				title: "<i>Invalid OTP</i>.",
				text: "Please Reenter OTP.",
				closeOnConfirm: !1
			}, (function(t) {
				verifyOtp(!1, !1)
			})), !1;
			$("#otpDiv").hide(), $("#otpTxt").prop("disabled", !0), $(".confirm").attr("disabled", !0), $(".cancel").attr("disabled", !0);
			var e = {};
			e.otp = $.trim($("#otpTxt").val()), e.txn_id = otpSentData.txn_id, e.mobile = studMap.mobile;
			var n = JSON.stringify(e);
			$.ajax({
				type: "POST",
				url: "otprequest/verify/" + OTPType,
				async: !1,
				dataType: "json",
				contentType: "application/json; charset=utf-8",
				data: n,
				beforeSend: function(t, e) {
					t.setRequestHeader(header, token)
				},
				success: function(t) {
					return "" == t ? (swal({
						html: !0,
						type: "error",
						confirmButtonColor: "#33bdef",
						title: "",
						text: "OTP verification failed. Please try again.",
						closeOnConfirm: !1
					}, (function(t) {
						verifyOtp(!1, !1)
					})), !1) : "1" != t.status ? (swal({
						html: !0,
						type: "error",
						confirmButtonColor: "#33bdef",
						title: "<i>OTP Verification failed.</i>",
						text: "Entered OTP-" + e.otp + " is Invalid, Please try again.",
						closeOnConfirm: !1
					}, (function(t) {
						verifyOtp(!1, !1)
					})), !1) : (encStatus = t.encStatus, otpStatus = t.status, otpSentData = "", void afterVerify(encStatus, otpStatus))
				},
				error: function(t) {
					return swal({
						html: !0,
						type: "error",
						confirmButtonColor: "#33bdef",
						title: "<i>ERROR</i>",
						text: "OTP Verification error.",
						closeOnConfirm: !1
					}, (function(t) {
						verifyOtp(!1, !1)
					})), !1
				},
				failure: function(t) {
					return swal({
						html: !0,
						type: "error",
						confirmButtonColor: "#33bdef",
						title: "<i>Failed</i>",
						text: "OTP Verification failed.",
						closeOnConfirm: !1
					}, (function(t) {
						verifyOtp(!1, !1)
					})), !1
				}
			})
		} else swal({
			html: !0,
			confirmButtonColor: "#33bdef",
			title: "<i>Cancelled</i>",
			text: "OTP Verification has been cancelled.",
			type: "error"
		}), min1 = 0, timer = 0, showMainPage(!0)
	}))
}

function resendOTP() {
	return otpGenCountArr[studMap.mobile] <= attempCountLimit && timer <= 0 && min1 <= 0 && ($("#otpDiv").hide(), sendOTP(OTPType, !1, !0)), !1
}
var sec1 = 59,
	min1 = 0,
	timer = 1;

function dispTimer() {
	timer >= 0 ? setTimeout((function() {
		try {
			document.getElementById("resendHref").innerHTML = "Wait for <strong>" + ("0" + min1).slice(-2) + ":" + ("0" + timer).slice(-2) + "</strong> to resend OTP."
		} catch(t) {
			console.log(t)
		}
		timer--, dispTimer()
	}), 1e3) : 0 != min1 ? (min1--, timer = sec1, dispTimer()) : document.getElementById("resendHref").innerHTML = "Resend OTP"
}

function startTimer() {
	otpGenCountArr[studMap.mobile] < attempCountLimit && (timer = sec1, min1 = startMinute + (otpGenCountArr[studMap.mobile] - 1), dispTimer())
}